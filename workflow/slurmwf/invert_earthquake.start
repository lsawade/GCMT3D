#!/bin/bash

# Get earthquake path from input
CMTSOLUTION=$1

if [ -z "$CMTSOLUTION" ]
then
      echo "No CMTSOLUTION INPUTcat  is empty. Stopping. Choose earthquake"
      exit 1
else
      echo "Inverting $(realpath $CMTSOLUTION)"
fi

# STUFF TO BE SET PRIOR TO RUNNING ANYTHING
GCMT3D='/home/lsawade/GCMT3D'
WORKFLOW_DIR="$GCMT3D/workflow"
PARAMETER_PATH="$WORKFLOW_DIR/params"
SLURM_DIR="$WORKFLOW_DIR/slurmwf"
BIN_DIR="$WORKFLOW_DIR/bins"
DATABASE_DIR='/tigress/lsawade/database'

# EARTHQUAKE PARAMETERS and Paths derived from the file
# Getting database entry from CMTSOLUTION FILE
EQ_ID=`cat $CMTSOLUTION | head -2 | tail -1 | cut -d: -f2 | tr -d '[:space:]'`
EQ_IN_DB="$DATABASE_DIR/eq_$EQ_ID/eq_$EQ_ID.cmt"
EQ_DIR=`dirname $EQ_IN_DB` # Earthquake Directory
CMT_SIM_DIR=$EQ_DIR/CMT_SIMs # Simulation directory
PROCESS_PATHS=$EQ_DIR/seismograms/process_paths # Process Path directory
LOG_DIR=$EQ_DIR/logs # Logging directory
INVERSION_OUTPUT_DIR=$EQ_DIR/inversion_output
WINDOW_PATHS=$EQ_DIR/window_data/window_paths

echo
echo "******** PACKAGE INFO ********************************"
echo "GCMT3D Location:_________________ $GCMT3D"
echo "Workflow Directory:______________ $WORKFLOW_DIR"
echo "Slurmjob Directory:______________ $SLURM_DIR"
echo "Bin directory (important):_______ $BIN_DIR" 
echo
echo

echo "******** DATABASE INFO *******************************"
echo "Database directory:______________ $DATABASE_DIR"
echo
echo

echo "******** EARTHQUAKE INFO *****************************"
echo "CMTSOLUTION:_____________________ $CMTSOLUTION"
echo "Earthquake ID:___________________ $EQ_ID"
echo "Earthquake Directory:____________ $EQ_DIR"
echo "Earthquake File in Database:_____ $EQ_IN_DB"
echo "Inversion Logging Directory:_____ $LOG_DIR"
echo "Simulation Directory:____________ $CMT_SIM_DIR"
echo "Process Path Directory:__________ $PROCESS_PATHS"
echo "Window Path Directory:___________ $WINDOW_PATHS"
echo
echo

# Activate conda environment
module load anaconda
conda activate gcmt3d

# Create database structure
python $BIN_DIR/create_entry.py $CMTSOLUTION

# Download data
# python $BIN_DIR/request_data.py $EQ_IN_DB 

# Start slurm script that does the whole shindig

sbatch << EOF
#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks=6
# SBATCH --ntasks-per-node=6
# SBATCH --gres=gpu:3
#SBATCH --mem=200000
#SBATCH --time 00:10:00
# SBATCH -p pReserved
#SBATCH --mail-user=lsawade@princeton.edu
# SBATCH --mail-type=END


# #WHAT???????? #SBATCH --requeue 

# Load the compilers and shit
module purge
module load intel
module load openmpi
module load cudatoolkit/10.0

# Load anaconda and set environment
module load anaconda
conda activate gcmt3d

# Define the parameters
CMT_LIST=(CMT CMT_rr CMT_tt CMT_pp CMT_rt CMT_rp CMT_tp CMT_depth CMT_lat CMT_lon)

########  Write Sources #######
WS_LOG=$LOG_DIR/$EQ_ID.003.Write-Sources.STDOUT
echo " "
echo "******** Writing Sources  ****************************"
echo " "
echo \$WS_LOG
# python $BIN_DIR/write_sources.py $EQ_IN_DB  > \$WS_LOG
echo "Done."
echo " "
echo " "


######## SIMULATIONS ########
SIM_LOG=$LOG_DIR/$EQ_ID.004.Simluations


echo "******** RUNNING SIMULATIONS *************************"
echo " "
# for CMT in "\${CMT_LIST[@]}"; do
#     echo "Simulation Directory: $CMT_SIM_DIR/\$CMT" && echo "Simulation Logfile \$SIM_LOG.\$CMT.STDOUT" &
#     srun -N2 -n6 --ntasks-per-node=3 --chdir=$CMT_SIM_DIR/\$CMT ./bin/xspecfem3D &
# done      
wait
echo " "
echo "Done."
echo " "
echo " "


######## CONVERT TRACES ########
echo "******** CONVERT TRACES ******************************"
echo " "

CONV_LOG=$LOG_DIR/$EQ_ID.005.Converting-to-ASDF

# Synthetic data
for CMT in "\${CMT_LIST[@]}"; do
    CONV_PATH_FILE=$CMT_SIM_DIR/\$CMT/\$CMT.yml
    echo "Conversion yml: \$CONV_PATH_FILE"
    CONV_LOG_FILE=\$CONV_LOG.\$CMT.STDOUT
    echo "Conversion logfile: \$CONV_LOG_FILE"
    # srun -N1 -n1 python $BIN_DIR/convert_to_asdf.py -f \$CONV_PATH_FILE > \$CONV_LOG_FILE &
done                                                   

# Observed data
CONV_PATH_FILE=$EQ_DIR/seismograms/obs/observed.yml
echo "Conversion yml: \$CONV_PATH_FILE"
CONV_LOG_FILE=\$CONV_LOG.observed.STDOUT
echo "Conversion logfile: \$CONV_LOG_FILE"
# srun -N1 -n1 python $BIN_DIR/convert_to_asdf.py -f \$CONV_PATH_FILE > \$CONV_LOG_FILE &
wait
echo " "
echo "Done."
echo " "
echo " "


######## Create Process Paths ########
echo "******** CREATE PROCESS PATHS ************************"
echo " "
CPP_LOG_FILE="$LOG_DIR/$EQ_ID.006.Create-Process-Paths.STDOUT"
echo "Create Process Paths Logfile: \$CPP_LOG_FILE"
# srun -N1 -n1 python $BIN_DIR/create_path_files.py $EQ_IN_DB > \$CPP_LOG_FILE
echo " "


######## Process Traces ########
echo "******** PROCESS TRACES ******************************"
echo " "
PROCESS_LOG="$LOG_DIR/$EQ_ID.007.Process-Traces"

# Get the different period bands as they will use the same asdf file
BAND_LIST=\$(for path in \$(ls $PROCESS_PATHS); do echo \$(echo \$path | cut -d. -f2); done | sort | uniq)
echo \$BAND_LIST
for BAND in \$BAND_LIST; do

    for PROCESS_PATH in \$(ls $PROCESS_PATHS); do
        if [[ \$PROCESS_PATH == *"\$BAND"* ]]; then
            PROCESS_PATH_FILE="$PROCESS_PATHS/\$PROCESS_PATH"
            echo "Processing yml: \$PROCESS_PATH_FILE"
            PROC_LOG_FILE="\$PROCESS_LOG.\$PROCESS_PATH.STDOUT"
            echo "Processing logfile: \$PROC_LOG_FILE"
            # srun -N1 -n1 python $BIN_DIR/process_asdf.py -f \$PROCESS_PATH_FILE > \$PROC_LOG_FILE &
        fi
    done 
done 
wait
echo " "
echo "Done."
echo " "
echo " "


######## Window Traces ########
echo "******** WINDOW TRACES *******************************"
echo " "
# Do body and surface waves seperately since they access the same
# asdf files
# Body waves
WINDOW_LOG="$LOG_DIR/$EQ_ID.008.Window-Traces"
for WINDOW_PATH in \$(ls $WINDOW_PATHS); do
    if [[ \$WINDOW_PATH != *"#surface"* ]]; then
        WINDOW_PATH_FILE="$WINDOW_PATHS/\$WINDOW_PATH"
        echo "Processing yml: \$WINDOW_PATH_FILE"
        WIND_LOG_FILE="\$WINDOW_LOG.\$WINDOW_PATH.STDOUT"
        echo "Processing logfile: \$WIND_LOG_FILE"
        srun -N1 -n1 --cpus-per-task=1 python $BIN_DIR/window_selection_asdf.py -f \$WINDOW_PATH_FILE > \$WIND_LOG_FILE &
    fi
done 
wait

# Surface waves
for WINDOW_PATH in \$(ls $WINDOW_PATHS); do
    if [[ \$WINDOW_PATH == *"#surface"* ]]; then
        WINDOW_PATH_FILE="$WINDOW_PATHS/\$WINDOW_PATH"
        echo "Processing yml: \$WINDOW_PATH_FILE"
        WIND_LOG_FILE="\$WINDOW_LOG.\$WINDOW_PATH.STDOUT"
        echo "Processing logfile: \$WIND_LOG_FILE"
        srun -N1 -n1 python $BIN_DIR/window_selection_asdf.py -f \$WINDOW_PATH_FILE > \$WIND_LOG_FILE
    fi
done
echo " "
echo "Done."
echo " "
echo " "


######## Create Inversion Dictionaries ########
echo "******** CREATE INVERSION DICTIONARIES****************"
echo " "
INV_DICT_LOG_FILE="$LOG_DIR/$EQ_ID.009.Create-Inversion-Dicts.STDOUT"
echo "Processing logfile: \$INV_DICT_LOG_FILE"
srun -N1 -n1 python $BIN_DIR/inversion_dicts.py -f $EQ_IN_DB -p $PARAMETER_PATH  > \$INVERSION_LOG_FILE
echo " "
echo "Done."
echo " "
echo " "


######## Inversion ########
echo "******** INVERSION ***********************************"
echo " "
INVERSION_LOG_FILE="$LOG_DIR/$EQ_ID.010.Create-Inversion-Dicts.STDOUT"
echo "Processing logfile: \$INVERSION_LOG_FILE"
srun -N1 -n1 python $BIN_DIR/inversion.py -f $EQ_IN_DB -p $PARAMETER_PATH  > \$INVERSION_LOG_FILE
echo " "
echo "Done."
echo " "
echo " "

exit 0
EOF
